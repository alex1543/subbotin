Документ: FTS-0001
Версия:  015
Дата:     30.08.90 г.




                    Основной Технический Стандарт FidoNet(r)
|                                 Версия 15
                      Ранее известный как FSC001, FSC-0001
|                      Randy Bush, Pacific Systems Group
|                             30 августа, 1990 г.




Статус данного документа:

    Этот  FTS   (FidoNet(r)  Technical   Standard  -   Технический  Стандарт
    FidoNet(r))  определяет стандарт для членов сети  FidoNet.  Узлы FidoNet
    должны  принимать  и  выполнять  эти  стандарты.  На распределение этого
    документа  накладываются   ограничения,   упомянутые   ниже  в   абзаце,
    касающемся  авторских  прав.

    Fido  и   FidoNet   являются   зарегистрированными   торговыми   марками
    Tom'а  Jennings'а  и  Fido  Software.

    Copyright   1986-90,    Randy   Bush.    Все   права    зарезервированы.
    Распространение  разрешено  только  без  изменения  и  только бесплатно.
    Ни при каких обстоятельствах данный документ не может быть воспроизведен
    или распространен как часть или в комплекте с любыми  изделиями,  или  в
    других   торговых   операциях,   за   которые   взимается  плата.  Любое
    воспроизведение  документа  в  целом   или  отрывков  из  него   требует
    ясно выраженного письменного согласия автора.


 A. Вступление

    FidoNet  разрослась так,  как никто и не мечтал,  и регулярно появляются
    новые  реализации  FidoNet.  К сожалению,  разбросанная по своей природе
    документация   и   отсутствие   четких  тестовых   процедур   затрудняют
|   реализацию.  FidoNet, желая способствовать и поощряя реализации FidoNet,
|   предлагает  создать  технический  стандарт   для   FidoNet.   Автор   не
    разрабатывал или указывал форматы данных или протоколы, только попытался
    документировать их.

    Этот  документ  определяет  структуры  данных  и протоколы коммуникации,
    которые  должна обеспечивать  реализация  FidoNet.  Таким образом,  этот
    документ  предназначен  для  тех,  кто  реализует  совместимые с FidoNet
    системы.

    Для рассмотрения  FidoNet с  точки зрения  стандартов было  использовано
    многоуровневое  представление  справочной  модели  Интерфейса   Открытых
    Систем ISO (ISO/OSI).  Имея в виду множество возможных описаний ISO/OSI,
    это не всегда просто в случае с FidoNet.

    Этот документ составлен на основе справочного материала, список которого
    приведен в конце.

    Технические замечания направляйте по адресу:
|     Randy Bush          uucp: uunet!m2xenix!randy  Internet: randy@psg.com
|     Pacific Systems Group            FidoNet: 1:105/6
|     9501 S.W. Westhaven Drive
|     Portland, Oregon  US-97225
|    и
      Rick Moore                       FidoNet: 1:115/333
|     Creative Automation Company
|     220 Fencl Lane
|     Hillside,  Illinois  US-60162-2098


   1. Основные требования к реализации FidoNet

      Совместимость - это такой набор способностей, которые, взятые в целом,
|     делают безопасным внесение сети или узла в NodeList  FidoNet.  Другими
      словами, если  другой узел  предпринимает попытку  связи,  имеет ли он
      реальные  шансы  на  успешную   коммуникацию?   Это  условие  является
      обязательным,  так  как оператор вызывающей системы  платит деньги  за
      попытку связи.  И наоборот,  любая реализация должна иметь возможность
      успешной  связи  с  другими  системами,  ведь жизнь  -  это не улица с
      односторонним движением.

      Любая реализация FidoNet должна иметь возможность вызывать другие узлы
      и  передавать сообщения  и  файлы  в обоих направлениях.  Это включает
      PICKUP  и  POLL.  Любая  реализация  FidoNet  должна иметь возможность
      принимать вызовы других узлов и  передавать сообщения и файлы в  обоих
      направлениях. Это включает PICKUP.

|     Реализации FidoNet  должны иметь возможность  принимать и обрабатывать
      NodeList  в  формате  FidoNet,  и передавать NodeList'ы  другим узлам.
|     Сопровождающий документ, FTS-0005, определят формат NodeList'а FidoNet
      и как переводить и обрабатывать его.

      Реализация FidoNet должна направлять сообщения,  не  имеющие  файловых
|     доплнений,  через Host'ы  сети,  как  показано  в  NodeList'е  формата
      FidoNet.


   2. Уровни соответствия стандарту

      Эти документы содержат  стандарты для минимальных  реализаций FidoNet.
      Вскоре  будет  выпущен  документ,  определяющий  тщательно проверенные
      расширения,  которые  не   являются  обязательными,  но   обеспечивают
      значительные  дополнительные  функции,  которые  должны  быть серьезно
      рассмотрены  узлами  FidoNet.  Отличным  примером  такой   расширенной
      реализации  FidoNet   является  SEAdog(tm)  фирмы  System  Enhancement
      Associates.


   3. Справочная Модель  ISO/OSI  (цитируется из  "Protocol Verification via
      Executable Logic Specifications",D.P.Sidhu, издательство Rudin & West)

      В  модели  ISO/OSI,  распределенная   система  состоит  из   объектов,
      сообщающихся друг с другом в соответствии со сводом правил, называемым
      протоколом.  Эта  модель  многоуровневая,  и  на  каждом уровне модели
      существуют   объекты,   ассоциирующиеся   с   этим   уровнем,  которые
      обеспечивают сервис для более высоких уровней, обмениваясь информацией
      с равноправными объектами,  используя  при этом сервис нижних уровней.
      Фактическая физическая коммуникация между двумя системами  выполняется
      только на нижнем уровне.

      При  определении  таких  протоколов  использовалось несколько методов.
      Общей составляющей  всех этих  методов является  понятие о расширенных
      конечных  автоматах  или   машинах.   Расширения  включают  добавление
      переменных состояния  для хранения  информации состояния  о протоколе.
      Состояние автоматм  может меняться  в результате  одного из  следующих
      событий:

      o Запрос сервиса от верхнего уровня сети

      o Ответ верхнему уровню

      o Запрос выполнения сервиса на нижний уровень сети

      o Ответ с нижнего уровня

      o Взаимодействие с системой и средой,  в которой реализуется  протокол
        (например,  блокировки по времени,  прекращения ведущей операционной
        системы,...)

      Определение спецификации  в значительной  степени состоит  из указания
      изменений состояния в автоматах,  моделирующих объекты протокола и  из
      описания данных, которыми они обмениваются.

      По ряду исторических причин термин "пакет"  используется в FidoNet для
      обозначения  "пачки" сообщений,  в то время  как  обычно  этот  термин
      используется для обозначения  единицы коммуникации,  которая в FidoNet
      известна как "блок".


   4. Описание данных

      Специфическое  языковое  представление  не  применялось.   Пожалуйста,
      помогите подавить зависимость от среды. Только вы можете предотвратить
      господство PC на рынке.  Не впадайте в панику, прямоугольная структура
      записи также имеется.

      (* нетерминальные символы *)
      UpperCaseName - будет определено ниже
      (Имя-в-Верхнем-Регистре)

      (* литералы *)
      "ABC"         - строка символов ASCII, окончания не предусмотрено
      nnH           - байт в шестнадцатиричном коде

      (* терминалы *)
      someName      - 16-битовое целое, младший бит первый (тип 8080)
      (какое-либо-Имя)
      someName[n]   - n-байтовое поле
      someName[.n]  - n-битовое поле
      someName(n)   - Строка, завершенная нулевым байтом, определенная для n 
                      символов (включая нулевой байт)
      someName{max} - Строка,  завершенная  нулевым  байтом,  длиной до  max 
                      символов (включая нулевой байт)    

      (* пунктуация *)
      a b           - 'a', за которой следует 'b'
      ( a | b )     - или 'a', или 'b', но не оба одновременно
      { a }         - ноль или более 'a'
      [ b ]         - ноль или один 'b'
      (* комментарий *) - игнорировать

      (* предварительно объявленная постоянная *)
      Null          = 00H
      (Нулевой-байт)


 5. Представление конечной машины

    .-----+----------+-------------------------+-------------------------+-----.
    |State| State    | Predicate(s)            | Action(s)               | Next|
    |  #  | Name     |                         |                         |  St |
    |-----+----------+-------------------------+-------------------------+-----|
    | fnn*|          |                         |                         |     |
    `-----+----------+-------------------------+-------------------------+-----'

    State #      - Номер данного состояния (например, R13).
    (# Состояния)  f  - Первая  буква  Конечной  Машины   (Window,   Sender,
                        Receiver, ...)                     Окно, Отправитель
                        Получатель
                   nn - номер состояния
                   *  - состояние,  представляющее  протокол  нижнего уровня,
                        представленного другим автоматом.

    State Name   - Описательное имя данного состояния.
    (Имя Состояния)

    Predicate(s) - Условия,   при   которых   состояние  завершается.   Если
    (Предикат(ы))  предикаты не исключающие,  они считаются упорядоченными.

    Action(s)    - Действие,  соответствующее предикату.
    (Действие(-вия))

    Next State   - Следующее состояние,  соответствующее предикату
    (Следующее состояние)

    В идеале  должен  быть  поддерживающий  раздел  для  каждого  состояния,
|   который должен давать  развернутое описание состояния,  его  предикатов,
    действий,  и т.д.


 B. Прикладной уровень: Система с точки зрения пользователя

    Прикладной  уровень  находится  вне  области,   определяемой  стандартом
    FidoNet, т.к. это уровень,  видимый прикладной системой пользователя,  в
    противоположность тому, как его  видит FidoNet.  В последние месяцы было
    достаточно  путаницы  и  дискуссий  о  формате  данных  на  этом уровне,
    гарантирующем  описание  структуры данных,  сообщение,  как оно хранится
    программами Fido, SEAdog, и Rover.

    Могут быть  реализованы  вполне  работоспособные  системы  FidoNet,  чьи
    хранимые сообщения значительно отличаются от данного формата.


   1. Определение данных прикладного уровня: Хранимое сообщение

                             Хранимое сообщение

      Смещение
     дес. шестн.
              .-----------------------------------------------.
        0   0 |                                               |
              ~                 fromUserName                  ~
              |                   36 байт                     |
              +-----------------------+-----------------------+
       36  24 |                                               |
              ~                  toUserName                   ~
              |                   36 байт                     |
              +-----------------------+-----------------------+
       72  48 |                                               |
              ~                    subject                    ~
              |                    72 байт                    |
              +-----------------------+-----------------------+
      144  90 |                                               |
|             ~                    DateTime                   ~
              |                    20 байт                    |
              +-----------------------+-----------------------+
      164  A4 | timesRead (младший)   | timesRead (старший)   |
              +-----------------------+-----------------------+
      166  A6 | destNode (младший)    | destNode (старший)    |
              +-----------------------+-----------------------+
      168  A8 | origNode (младший)    | origNode (старший)    |
              +-----------------------+-----------------------+
      170  AA |   cost (младший)      |   cost (старший)      |
              +-----------------------+-----------------------+
      172  AC | origNet (младший)     | origNet (старший)     |
              +-----------------------+-----------------------+
      174  AE | destNet (младший)     | destNet (старший)     |
              +-----------------------+-----------------------+
|     176  B0 | destZone (по выбору)  | destZone (по выбору)  |
|             +-----------------------+-----------------------+
|     178  B2 | origZone (по выбору)  | origZone (по выбору)  |
|             +-----------------------+-----------------------+
|     180  B4 | destPoint(по выбору)  | destPoint(по выбору)  |
|             +-----------------------+-----------------------+
|     182  B6 | origPoint(по выбору)  | origPoint(по выбору)  |
              +-----------------------+-----------------------+
      184  B8 |  replyTo (младший)    |  replyTo (старший)    |
              +-----------------------+-----------------------+
      186  BA | Attribute (младший)   | Attribute (старший)   |
              +-----------------------+-----------------------+
      188  BC | nextReply (младший)   | nextReply (старший)   |
              +-----------------------+-----------------------+
      190  BE |                      text                     |
              ~                   несвязанный                 ~
              |             завершен нулевым байтом           |
              `-----------------------------------------------'

      Message    = fromUserName(36)  (* завершено нулевым байтом *)
      (Сообщение)  (отПользователяИмя)
                   toUserName(36)    (* завершено нулевым байтом *)
                   (ПользователюИмя)
                   subject(72)       (* см. FileList ниже *)
                   (предмет)             (СписокФайлов)
                   DateTime          (* последняя редакция тела сообщения *)
                   (ДатаВремя)
|                  timesRead         (* сколько раз сообщение прочитано *)
                   (разПрочитано)
                   destNode          (* сообщения *)
                   (назначенияУзел)
                   origNode          (* сообщения *)
                   (исходныйУзел)
                   cost              (* в наименьших денежных единицах
                   (стоимость)          страны исходного узла *)
                   origNet           (* сообщения *)
                   (исходнаяСеть)
                   destNet           (* сообщения *)
                   (назначенияСеть)
|                  destZone          (* сообщения *)
                   (назначенияЗона)
|                  origZone          (* сообщения *)
                   (исходнаяЗона)
|                  destPoint         (* сообщения *)
                   (назначенияPoint)
|                  origPoint         (* сообщения *)
                   (исходныйPoint)
                   replyTo           (* сообщение, на которое данное
                   (ответНа)            отвечает *)
                   AttributeWord
                   (СловоАтрибута)
                   nextReply         (* сообщение, отвечающее на данное *)
                   (следующийОтвет)
                   text(unbounded)   (* завершен нулевым байтом *)
                   (текст(несвязанный))

      DateTime   = (* символьная строка длиной в 20 символов *)
                                     (* 01 Jan 86  02:34:56 *)
                   DayOfMonth " " Month " " Year " "
                   ДеньМесяца " " Месяц " " Год " "
                   " " HH ":" MM ":" SS
                   " " ЧЧ ":" ММ ":" СС
                   Нулевой байт

      DayOfMonth = "01" | "02" | "03" | ... | "31"   (* Fido заполняет 0 *)
      Month      = "Jan" | "Feb" | "Mar" | "Apr" | "May" | "Jun" |
                   "Jul" | "Aug" | "Sep" | "Oct" | "Nov" | "Dec"
      Year       = "01" | "02" | .. | "85" | "86" | ... | "99" | "00"
      HH         = "00" | .. | "23"
      MM         = "00" | .. | "59"
      SS         = "00" | .. | "59"

      AttributeWord   бит       значение
                      ---       --------------------
                        0  +    Private (Частный)
                        1  + s  Crash (Авария)
                        2       Recd (Полученный)
                        3       Sent (Посланный)
                        4  +    FileAttached (ФайловоеДополнение)
                        5       InTransit (Входящий)
                        6       Orphan (Висячий)
                        7       KillSent (УбитьПосланный)
                        8       Local (Локальный)
                        9    s  HoldForPickup (ДержатьДляPickup)
                       10  +    unused (не используется)
                       11    s  FileRequest (ЗапросФайла)
                       12  + s  ReturnReceiptRequest
                                (ЗапросВозвратаПринятого)
                       13  + s  IsReturnReceipt (ВозвратПринятого)
                       14  + s  AuditRequest (ЗапросПроверки)
                       15    s  FileUpdateReq (ЗапросОбновленияФайла)

                             s - не обязательно должен распознаваться,
                                 но допускается
|                            + - не обнуляется перед пакетированием

      Номера битов возрастают с арифметической значимостью разряда.


      Текст сообщения

      Текст сообщения несвязан и завершен нулевым байтом  (обратите внимание
      на исключение ниже).

      'Твердый' возврат каретки,  0DH,  отмечает  конец абзаца,  и не должен
      использоваться.

      Так  называемый  'мягкий'  возврат   каретки,   8DH,   может  отмечать
      автоматический  переход   на  новую   строку  предыдущего   текстового
      процессора и должен игнорироваться.  Имейте в виду,  что за ними могут
      следовать или не следовать символы перевода строки.

      Все  символы  перевода строки,  0AH,  должны игнорироваться.  Системы,
      которые выводят  текст сообщения  на экран,  должны переносить длинные
      строки на следующие,  подходящие для данной прикладной программы.

      Если первый символ физической  строки (например,  первый символ текста
      сообщения,   или  символ  непосредственно  после  'твердого'  возврата
      каретки  (игнорируя  все  символы  перевода  строки)) - это символ  ^A
      (<control-A>,  01H),  то эта  строка не  выводится на экран,  т.к. она
      содержит  управляющую  информацию.  Соглашение  по  таким  контрольным
      строкам следующее:
        o Они начинаются с ^A
        o Они заканчиваются  в  конце  физической  строки  (т.е.  игнорируют
          мягкие символы <cr>).
        o Они начинаются с ключевого слова, за которым следует двоеточие.
        o Ключевые слова присваиваются  уникальными  для  каждой  прикладной
          программы.
        o За парой  "ключевое слово/двоеточие"  следуют специфические данные
          прикладной программы.

      Текущие назначения ключевых слов ^A следующие:
      o TOPT <pt no> - адрес Point'а назначения
             (номер Point'а)
      o FMPT <pt no> - адрес исходного Point'а
             (номер Point'а)
      o INTL <dest z:n/n> <orig z:n/n> - используется для межзональных
             (назначение)  (источник)    адресов в формате "зона:сеть/узел"


      Спецификации файлов

      Если в AttributeWord занесен один или более FileAttached, FileRequest,
      или  FileUpdateReq,   поле  subject{72}  интерпретируется  как  список
      спецификаций  файлов,  который  может  содержать  джокерные символы  и
      другие системно-зависимые данные. Этот список имеет следующий формат:

      FileList = [ FileSpec { Sep FileSpec } ] Null
      (СписокФайлов)                           (Нулевой байт)
                 (Спецификации  (Спецификации
                    файлов)        файлов)

      FileSpec =     (* Спецификация  файла  в  зависимости  от  реализации.
      (Спецификация  Может  не  содержать  Нулевого  байта   или  любого  из
       Файла)        символов  Разделителя. *)

      Sep      = ( " " | "," )  { " " }
      (Разделитель)


      Существуют отклонения от этих спецификаций и дополнения к ним.

      1  - Fido не обязательно завершает текст сообщения Нулевым байтом,  но
|          использует  пустую строку  (0DH 0AH 0DH 0AH).  Некоторые  утилиты
|          Fido используют EOF (1AH).

      2 - SEAdog обнуляет поле стоимости сообщения при создании сообщения.

      4 - SEAdog использует другой формат для дат, например:

      DateTime   = (* строка символов длиной в 20 символов *)
                   (* Формат SEAdog  Mon 1 Jan 86 02:34 *)
|                  DayOfWk " " DayOfMo " " Month " " Year " " HH ":" MM
                   Нулевой байт

|     DayOfWk    = "Mon" | "Tue" | "Wed" | "Thu" | "Fri" | "Sat" | "Sun"
      (ДеньНедели)
|     DayOfMo    = " 1" | " 2" | " 3" | ... | "31"  (* заполнение бланка *)
      (ДеньМесяца)



   2. Прикладной протокол: Графики и события

      На  прикладном   уровне  FidoNet   налагаемые  протоколом   требования
      незначительны.   Реализация   должна   автоматически   инициировать  и
      принимать соединения между узлами FidoNet. Некоторые реализации делают
      это  в  'окнах',  или  интервалах времени.  Пересылка сообщений обычно
      различна и настраивается для каждого окна графика.

|     Способность  передавать и принимать данные  от любого узла  NodeList'а 
|     FidoNet во время Zone Mail Hour  (например,  9:00-10:00 UCT  в Зоне 1) 
      считается обязательной.

      Текущие реализации собирают  все данные для  выхода в начале  окна,  и
      разбирают входящие данные в конце окна.  Исходя из  производительности
      малых машин,  это можно считать  значительной оптимизацией.  Заметьте,
      что это делает пересылку немного менее динамичной.


 C. Уровень представления данных: Пользователь с точки зрения системы

   1. Определение данных уровня представления данных: Упакованное Сообщение

      Для сохранения места и избежания  полей,  которые при передаче были бы
      бессмысленны   (например,    timesRead),    сообщения    упаковываются
      для  передачи.  Т.к.  это такая  структура данных,  которая передается
      фактически,  ее  определение  имеет   важное  значение  для   FidoNet.
      Упакованное сообщение имеет некоторое число полей фиксированной длины,
      за которыми следуют четыре строки,  завершенные нулевыми байтами.

      В  то  время  как  большинство  строковых  полей  в хранимом сообщении
      имеют фиксированную длину,  для сохранения места в пакете строки имеют
      переменную длину.  Все  строки  переменной длины  завершаются  Нулевым
      байтом,  включая в первую очередь текст сообщения.


                           Упакованное сообщение

       Смещение
      дес. шестн.
              .-----------------------------------------------.
        0   0 |    0     |     2      |    0      |    0      |
              +-----------------------+-----------------------+
        2   2 | origNode (младший)    | origNode (старший)    |
              +-----------------------+-----------------------+
        4   4 | destNode (младший)    | destNode (старший)    |
              +-----------------------+-----------------------+
        6   6 | origNet (младший)     | origNet (старший)     |
              +-----------------------+-----------------------+
        8   8 | destNet (младший)     | destNet (старший)     |
              +-----------------------+-----------------------+
       10   A | Attribute (младший)   | Attribute (старший)   |
              +-----------------------+-----------------------+
       12   C |   cost (младший)      |   cost (старший)      |
              +-----------------------+-----------------------+
       14   E |                                               |
              ~                    DateTime                   ~
              |                    20 байт                    |
              +-----------------------+-----------------------+
|      34  22 |                  toUserName                   |
              ~                  до 36 байт                   ~
              |          завершается нулевым байтом           |
              +-----------------------+-----------------------+
              |                 fromUserName                  |
              ~                  до 36 байт                   ~
              |          завершается нулевым байтом           |
              +-----------------------+-----------------------+
              |                    subject                    |
              ~                  до 72 байт                   ~
              |          завершается нулевым байтом           |
              +-----------------------+-----------------------+
              |                      text                     |
              ~                   несвязанный                 ~
              |          завершается нулевым байтом           |
              `-----------------------------------------------'

      Исходя из маршрутизации, исходные сеть и узел и сеть и узел назначения
      пакета  часто оличаются  от  тех,  которые указаны в сообщении,  также
      необязательно,  чтобы сети и узлы происхождения и назначения сообщений
      в одном пакете были однородными.

|     PakdMessage  = 02H 00H           (* тип сообщения, старый тип-1
                                          устарел *)
                     origNode          (* сообщения *)
                     destNode          (* сообщения *)
                     origNet           (* сообщения *)
                     destNet           (* сообщения *)
                     AttributeWord
                     cost              (* в наименьших денежных единицах
                                          страны инициирующего узла *)
                     DateTime          (* последняя редакция тела
                                          сообщения *)
                     toUserName{36}    (* завершается Нулевым байтом *)
                     fromUserName{36}  (* завершается Нулевым байтом *)
                     subject{72}       (* завершается Нулевым байтом *)
                     text{unbounded}   (* завершается Нулевым байтом *)







 2. Протокол уровня представления данных: "Почтовое" окно

   .-----+----------+-------------------------+-------------------------+-----.
   |State| State    | Predicate(s)            | Action(s)               | Next|
   |  #  | Name     |                         |                         | St  |
   |-----+----------+-------------------------+-------------------------+-----|
   | W0  | WindTop  | 1 время окна окончено   | выключить ответ модема  |выход|
   |     | (Вершина)| 2 в окне остается время | обеспечить ответ модема | W1  |
   |-----+----------+-------------------------+-------------------------+-----|
   | W1  | WindIdle | 1 входящий вызов        |                         | W2  |
   |     |(Ожидание)| 2 режим только приема   |                         | W0  |
   |     |          | 3 режим только передачи |                         | W3  |
   |     |          | 4 60-180 с и нет вызова |                         | W3  |
   |-----+----------+-------------------------+-------------------------+-----|
   | W2* | WindRecv |                         | (receive call R0)       | W3  |
   |     | (Прием)  |                         | (принять вызов R0)      |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | W3  | WindCall | 1 выбор выход. вызова   | пошаговый счет попыток  | W4  |
   |     | (Вызов)  | 2 нет выходящих вызовов |                         | W0  |
   |-----+----------+-------------------------+-------------------------+-----|
   | W4* | WindSend |                         | (make call S0)          | W5  |
   |     |(Передача)|                         | (выполнить вызов S0)    |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | W5  | WindMark | 1 вызов успешный        | удал.узел из списка выз.| W0  |
   |     | (Метка)  | 2 не соединено          | удал.если сч.попыт.>lim | W0  |
   |     |          | 3 вызов неудачен        | увеличить сч. соединений| W0  |
   |     |          |                         | удал.если сч.соед.>lim  |     |
   `-----+----------+-------------------------+-------------------------+-----'


    Время задержки между вызовами в W1.4 не имеет решающего значения.  Важно
|   только, чтобы оно не было постоянным, чтобы две системы, вызывающие друг
    друга,  не   обнаруживали  неопределенные   сигналы  "занято".   Сложные
    реализации могут изменять время задержки между вызовами в зависимости от
    количества   вызовов,   которые   необходимо   сделать,   ширины   окна,
    спецификации пользователя и т.д.


 D. Сеансовый протокол: Соединение с другой машиной FidoNet

    Сеанс - это соединение между двумя машинами  FidoNet.  В настоящее время
    оно  выполняется  через  модемы  по телефонной сети.  Вызывающая  машина
    начинает  сеанс   как  отправитель,   а  вызываемая  -  как  получатель.
    Возможность выполнения PICKUP'а  описывается отправителем и получателем,
    поменявшимися ролями во время сеанса, после того как отправитель передал
    пакет  сообщений   и  файловые  дополнения,   если   они   есть.   Из-за
    недостаточной секретности, обеспечиваемой протоколом PICKUP'а (опасность
    PICKUP'а ложным узлом),  в ближайшем  будущем  можно  ожидать  изменения
    протокола.

    Когда  соединение  установлено,   каждая  система  должна   обеспечивать
    сохранение  физического  соединения  во  время  сеанса.  Для  физических
    уровней,  реализуемых  через  модемы,   это  означает  текущий  контроль
    принимаемого сигнала линии,  и завершение сеанса при его потере.

    Обнаружение ошибок на физическом уровне  должно контролироваться как при
    передаче, так и при приеме символов.  Четность, кадровая синхронизация и
    другие физические ошибки должны обнаруживаться.

    Отправитель 

   .-----+----------+-------------------------+-------------------------+-----.
   |State| State    | Predicate(s)            | Action(s)               | Next|
   |  #  | Name     |                         |                         | St  |
   |-----+----------+-------------------------+-------------------------+-----|
   | S0  | SendInit |                         | dial modem              | S1  |
   |     |(Инициир.)|                         | (набрать номер модема)  |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | S1  | WaitCxD  | 1 линия обнаружена      | задержка 1-5 секунд     | S2  |
   |     |  (Ждать  | 2 "занято" и т.д.       | сообщение "нет соедин." |выход|
   |     |  сигнал  | 3 голос                 | сообщение "нет линии"   |выход|
   |     |  линии)  | 4 линия не обнаружена   | сообщение "нет соедин." |выход|
   |     |          |   в течение 60 секунд   |                         |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | S2  | WhackCRs | 1 в течение 30 секунд   | сообщ."нет ответных<cr>"|выход|
   |     |  (Ждать  | 2 ?? <cr> получено      | задержка 1 секунда      | S3  |
   |     | подтверж-| 3 <cr> не получены      | посылать<cr><sp><cr><sp>| S2  |
   |     |дающих<cr>|                         | задержка ??? секунд     |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | S3  | WaitClear| 1 нет ввода в теч. 0,5 с| посылать TSYNCH = AEH   | S4  |
   |     | (Ждать   | 2 прошло 60 секунд и    | прекратить связь,       |выход|
   |     | очищения)|   линия не очищена      | сообщение "мусор"       |     |
   |-----+----------+-------------------------+-------------------------+-----|
|  | S4* | TSyncChk | 1 'C'или NAK (прочитано)| (XMODEM посл. пакет XS1)| S5  |
|  |     |(Проверка | 2 более 2 секунд        | игнор.шум, повтор.TSYNCH| S4  |
|  |     |  TSync)  | 3 более 30 секунд       | прекратить связь,       |выход|
   |     |          |                         | сообщение "не Fido"     |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | S5  | CheckMail| 1 XMODEM успешный       | (Fido регистр. успех)   | S6  |
   |     | (Проверка| 2 XMODEM отказ или      | прекратить связь,       |выход|
   |     |   Mail)  |   прекращение по времени| сообщение "Mail плохой" |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | S6* | SendFiles|                         | (BATCH послать файлы    | S7  |
   |     | (Послать |                         |                 BS0)    |     |
   |     |  файлы)  |                         |                         |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | S7  | CheckFile| 1 BATCH послан успешно  |                         | S8  |
   |     |(Проверить| 2 BATCH послан неудачно | прекратить связь,       |выход|
   |     |  файл)   |                         | сообщение "файлы отказ."|     |
   |-----+----------+-------------------------+-------------------------+-----|
   | S8  | TryPickup| 1 желание PICKUP        | примечание "передача ok"| R2* |
   |     | (Попытка | 2 нет желания PICKUP    | задержка 5 секунд       |выход|
   |     |  PICKUP) |                         |  прекратить связь       |     |
   |     |          |                         |  сообщение "передача ok"|     |
   `-----+----------+-------------------------+-------------------------+-----'

    Хотя из  данной таблицы  видно,  что  отправитель генерирует только один
    TSYNCH,  рекомендуется,   чтобы  с   паузой  5-20  секунд  инициировался
    повторный TSYNCH.  Получатель должен допускать множественные TSYNCH.

    В состоянии S4,  слово "прочитано" означает,  что символ не удаляется из
    буфера. Таким образом, когда начинается XS1, символ, начинающий передачу
    XMODEM, будет обнаружен.

   Получатель 

    Принимающая конечная машина  имеет  внешний таймер,  превышение  времени
    которого приводит к завершению с результатом 'нет вызовов' (R0.2).

   .-----+----------+-------------------------+-------------------------+-----.
   |State| State    | Predicate(s)            | Action(s)               | Next|
   |  #  | Name     |                         |                         | St  |
   |-----+----------+-------------------------+-------------------------+-----|
   | R0  | WaitCxD  | 1 линия обнаружена      |                         | R1  |
   |     |  (Ждать  | 2 превышено время,      | сообщение "нет вызовов" |выход|
   |     |  сигнал  |   установленное         |                         |     |
   |     |  линии)  |   во внешнем таймере    |                         |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | R1  | WaitBaud | 1 скорость в бодах      | послать пароль с <cr>   | R2  |
   |     |(ЖдатьБод)|   обнаружена            |                         |     |
   |     |          | 2 не обнаружена ?? сек  | прекратить связь,       |выход|
   |     |          |                         | сообщение "нет бод"     |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | R2  | WaitTsync| 1 TSYNCH получен        | игнор.ввод,кроме TSYNCH | R3  |
   |     |  (Ждать  | 2 прекращение по времени| прекратить связь,       |выход|
   |     |  Tsync)  |   через 60 секунд       | сообщение "не Fido"     |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | R3* | RecMail  |                         | (XMODEM принять пакет   | R4  |
   |     | (Принять |                         |                  XR0)   |     |
   |     |   Mail)  |                         |                         |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | R4  | XRecEnd  | 1 XMODEM успешный       | задержка 1 секунда      | R5  |
   |     |  (Конец  |                         |   подавлять ввод        |     |
   |     |  приема) | 2 XMODEM неудачный      | прекратить связь,       |выход|
   |     |          |                         | сообщение "неудача Mail"|     |
   |-----+----------+-------------------------+-------------------------+-----|
   | R5* | RecFiles |                         | (BATCH принять файлы    | R6  |
   |     | (Принять |                         |                 BR0)    |     |
   |     |  файлы)  |                         |                         |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | R6  | ChkFiles | 1 BATCH прием успешный  | задержка 2 секунды      | R7  |
   |     |(Проверить| 2 BATCH прием неудачный | прекратить связь,       |выход|
   |     |  файлы)  |                         | сообщение "плохой файл" |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | R7  | AllowPkup| 1 есть PICKUP для       | получатель становится   | S3* |
   |     |(Разрешить|   отправителя           |   отправителем          |     |
   |     |  PICKUP) | 2 ничего нет для PICKUP | прекратить связь,       |выход|
   |     |          |                         | сообщение "прием ok"    |     |
   `-----+----------+-------------------------+-------------------------+-----'


 E. Транспортный Уровень: ?????

   1. Определения данных

|  2. Протокол транспортного уровня: Маршрутизация

      В  FidoNet  сообщение  необязательно  посылается  прямо по назначению.
      Для  уменьшения  количества  соединений  в  сети Mail для подмножества
      узлов NodeList'а  может быть  направлен одному  узлу для  последующего
      распределения  внутри   этого  подмножества.   Кроме  того,   возможна
      маршрутизация   по   заказу   отправителя.   Маршрутизация   сообщения
      определяется одним из трех способов.

      o Если имеются файловые дополнения,  то сообщение  должно быть послано
        прямо по назначению.

      o Сообщения без файловых дополнений  должны направляться через входной
|       Host подмножества узлов  узла назначения,  как  указано в NodeList'е
        формата FidoNet.

      o Чтобы  предотвратить  перегрузку  входных  Host'ов,  система  должна
        обеспечивать  блокировку  маршрутизации через Host'ов  для  целевого
        узла, или узлов.


 F. Сетевой уровень: Система, маршрутизация и пакеты с точки зрения сети


   1. Определение данных сетевого уровня: Заголовок пакета

      Пакет содержит сообщения в упакованном формате для передачи по сети во
      время  соединения.  Поскольку  эта  структура  данных  передается,  ее
      определение имеет большое значение для FidoNet.

      Пакет может содержать ноль или более упакованных сообщений.  Пакет без
      сообщений часто генерируется как пакет опроса.

      Каждый  пакет  начинается с заголовка пакета.  Поля  заголовка  пакета
      имеют фиксированную длину.


                             Заголовок пакета
      Смещение
     дес. шестн.
              .-----------------------------------------------.
        0   0 | origNode (младший)    | origNode (старший)    |
              +-----------------------+-----------------------+
        2   2 | destNode (младший)    | destNode (старший)    |
              +-----------------------+-----------------------+
        4   4 |   year (младший)      |   year (старший)      |
              +-----------------------+-----------------------+
        6   6 |  month (младший)      |  month (старший)      |
              +-----------------------+-----------------------+
        8   8 |   day (младший)       |   day (старший)       |
              +-----------------------+-----------------------+
       10   A |   hour (младший)      |   hour (старший)      |
              +-----------------------+-----------------------+
       12   C |  minute (младший)     |  minute (старший)     |
              +-----------------------+-----------------------+
       14   E |  second (младший)     |  second (старший)     |
              +-----------------------+-----------------------+
       16  10 |   baud (младший)      |   baud (старший)      |
              +-----------------------+-----------------------+
       18  12 |    0     |     2      |    0      |    0      |
              +-----------------------+-----------------------+
       20  14 | origNet (младший)     | origNet (старший)     |
              +-----------------------+-----------------------+
       22  16 | destNet (младший)     | destNet (старший)     |
              +-----------------------+-----------------------+
|      24  18 |       prodCode        |       serialNo        |
|             +-----------------------+-----------------------+
|      26  1A |                                               |
|             |        password (некоторые реализации)        |
|             |                  восемь байт                  |
|             |           дополнено нулевыми байтами          |
|             |                                               |
|             +-----------------------+-----------------------+
|      34  22 | origZone (мл.) (выб.) | origZone (ст.) (выб.) |
|             +-----------------------+-----------------------+
|      36  24 | destZone (мл.) (выб.) | destZone (ст.) (выб.) |
|             +-----------------------+-----------------------+
|      38  26 |                     fill                      |
|             ~                   20 байт                     ~
|             |                                               |
|             +-----------------------+-----------------------+
|      58  3A |                ноль или более                 |
              ~                  упакованных                  ~
              |                   сообщений                   |
              +-----------------------+-----------------------+
              |    0     |     0      |    0     |     0      |
              `-----------------------+-----------------------'


      Packet       = PacketHeader  { PakdMessage }  00H 00H
      (Пакет)       (ЗаголовокПакета) (УпакованноеСообщение)

      PacketHeader = origNode   (* пакета, а не сообщений в пакете *)
                     (исхУзел)
                     destNode   (* пакета, а не сообщений в пакете *)
                     (назнУзел)
                     year       (* создания пакета, например, 1986 *)
                     (год)
                     month      (* создания пакета, 0-11 для Jan-Dec *)
                     (месяц)
                     day        (* создания пакета, 1-31 *)
                     (день)
                     hour       (* создания пакета, 0-23 *)
                     (час)
                     minute     (* создания пакета, 0-59 *)
                     (месяц)
                     second     (* создания пакета, 0-59 *)
                     (секунда)
                     baud       (* максимальная скорость в бодах исходного
                     (бод)         узла и узла назначения, 0=SEA *)
|                    PacketType (* старый тип-1 теперь устарел *)
                     (ТипПакета)
                     origNet    (* пакета, а не сообщений в пакете *)
                     (исхСеть)
                     destNet    (* пакета, а не сообщений в пакете *)
                     (назнСеть)
                     prodCode   (* 0 для Fido, пишите в FTSC для других *)
                     (кодПродукта)
|                    serialNo   (* двоичный порядковый номер (в противном
                     (порядкNo)    случае нулевой байт) *)
|                    password   (* пароль сеанса (в противном случае
                     (пароль)      нулевой байт) *)
|                    origZone   (* зона отправителя пакета (в противном
                     (исхЗона)     случае нулевой байт) *)
|                    destZone   (* зона получателя пакета (в противном
                     (назнЗона)    случае нулевой байт) *)
|                    fill[20]
                     (заполнение)

      PacketType   = 02H 00H  (* 01H 00H использовался версиями Fido до 10,
                                 которые не поддерживали локальные сети.
                                 Заголовок упакованного сообщения в этих
                                 также был другим *)

|     prodCode     = (  00H      (* Fido *)
|                    |  ...
                     |  ??H      (* Напишите нам, чтобы узнать код *)
                     )


      Остальная  часть  пакета  состоит  из  упакованных  сообщений.  Каждое
      упакованное  сообщение  начинается  со  слова  типа  сообщения  0200H.
      Псевдосообщение,  начинающееся со слова 0000H означает конец пакета.


   2. Описание данных сетевого уровня: Файл с атрибутами

      Протокол BATCH  использует имя файла MODEM7 и протокол передачи файлов
      TeLink/XMODEM для передачи файлов с атрибутами.

      При  передаче  файла  через  FidoNet,  делается попытка передать также
      атрибуты операционной системы для  этого файла,  такие как длина, дата
      модификации и т.д. FidoNet делает это через специальный префикс-блок к
      передаче  файла  XMODEM  с  использованием  протокола,  известного как
      TeLink.  Поскольку  протокол  TeLink  основан на модификации протокола
      передачи файлов XMODEM,  он документирован на канальном уровне.

      Имя файла MODEM7 необязателен,  если имеется также блок  TeLink,  и  в
      этом случае может быть любое из имен или оба сразу.

                              ИмяФайла как Передано
      Смещение
     дес. шестн.
              .-----------------------------------------------.
        0   0 |              fileName (имяФайла)              |
              ~                   8  байт                     ~
              | выравнено по левому краю, заполнено пробелами |
              +-----------------------+-----------------------+
        8   8 |           fileExt (расширениеФайла)           |
              ~                    3  байта                   ~
              | выравнено по левому краю, заполнено пробелами |
              `-----------------------------------------------'


 3. Протокол сетевого уровня: Конечные машины файла BATCH


    Отправитель файла BATCH

   .-----+----------+-------------------------+-------------------------+-----.
   |State| State    | Predicate(s)            | Action(s)               | Next|
   |  #  | Name     |                         |                         | St  |
   |-----+----------+-------------------------+-------------------------+-----|
   | BS0*| MoreFiles| 1 еще есть файлы для    | (послать имя файла      | BS1 |
   |     |(ЕщеФайлы)|   передачи              |  MODEM7 MS0)
   |     |          | 2 нет файлов для перед. |                         | BS3 |
   |-----+----------+-------------------------+-------------------------+-----|
   | BS1 | CheckFNm | 1 Имя Файла MODEM7 ok   |(послать файл TeLink XS0)| BS2 |
   |     |(Проверить| 2 Плохое ИмяФайла MODEM7| сообщение "послано      |выход|
   |     | ИмяФайла)|                         |   плохое имя"           |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | BS2 | CheckFile| 1 TeLink послан ok      |                         | BS0 |
   |     |(Проверить| 2 TeLink послан плохой  | сообщение "послан плохой|выход|
   |     |   Файл)  |                         |   файл"                 |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | BS3 | EndSend  | 1 распознан NAK для     | послать EOT, сообщение  |выход|
   |     |  (Конец  |   следующего файла      |   "передача ok"         |     |
   |     | Передачи)| 2 10 секунд - нет NAK   | послать EOT, сообщение  |выход|
   |     |          |                         |   "нет NAK"             |     |
   `-----+----------+-------------------------+-------------------------+-----'

    Когда файлов для передачи больше не остается,  отправитель  отвечает  на
|   NAK  получателя  сигналом EOT.  Отправитель не отвечает на EOT сигналами
    ACK или NAK.

    Имена  файлов  должны  быть  в  верхнем регистре  кода ASCII.  Канальный
    уровень использует "u" как управляющий символ.


    Получатель файла BATCH

   .-----+----------+-------------------------+-------------------------+-----.
   |State| State    | Predicate(s)            | Action(s)               | Next|
   |  #  | Name     |                         |                         | St  |
   |-----+----------+-------------------------+-------------------------+-----|
   | BR0*| RecvName |                         | (Принять ИмяФайла       | BR1 |
   |     | (Принять |                         |    MODEM7 MR0)          |     |
   |     |   Имя)   |                         |                         |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | BR1 | CheckFNm | 1 MODEM7 нет файлов     | сообщ."файлы приняты ok"|выход|
   |     |(Проверить| 2 MODEM7 ИмяФайла ok    |(принять файл TeLink XR0)| BR2 |
   |     | ИмяФайла)| 2 MODEM7 ИмяФайла плохое| сообщение "принято      |выход|
   |     |          |                         |   плохое имя"           |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | BR2 | CheckFile| 1 TeLink принят ok      |                         | BR0 |
   |     |(Проверить| 2 TeLink принят плохо   | сообщение "плохо принят |выход|
   |     |   Файл)  |                         |   файл"                 |     |
   `-----+----------+-------------------------+-------------------------+-----'


 G. Канальный уровень: Безошибочная передача данных

   1. Определение данных канального уровня: Блоки XMODEM/TeLink

      Передачи XMODEM  выполняются блоками по  128 неинтерпретированных байт
|     данных,  перед которыми передается трех-байтовый заголовок,  а после -
      либо одно-байтная контрольная сумма,  либо  двух-байтный  остаток CRC.
      XMODEM не обеспечивает передачу потоков данных, длина которых не равна
      целому числу блоков.  Таким  образом,  отправитель  заполняет  потоки,
      длина которых не кратна  128 байтам,  символами  end-of-file  (^Z  для
      MS-DOS),   и  использует  другие  средства   для  передачи  получателю
      информации об истинной длине данных  (например,  блок информации файла
      TeLink).

      Блоки данных содержат  последовательные числа,  чтобы  получатель  был
      уверен,   что   принимает   правильный  блок.   Номера  блоков  -  это
      последовательные восьми-битовые целые числа без знаков,  начиная с 01H
      и заканчивая 00H,  за исключением блока TeLink, которому присваивается
      последовательный номер 00H.

      Для файловых дополнений к пакету Mail, не для самого пакета Mail, если
      передающая  система  знает  атрибуты  файлов,  известные  операционной
      системе,  то первый блок передачи XMODEM может быть специальным блоком
      TeLink для передачи этой информации. Этот блок отличается тем, что его
      первый байт  -  символ SYN,  а не  SOH,  и  в  нем  всегда  посылается
      контрольная сумма, а не CRC.  Если же получатель не хочет обрабатывать
      такую информацию,  после двух  NAK (или "C"),  отправитель  пропускает
      этот специальный блок,  и переходит к самим данным.



                       Блок данных XMODEM (режим CRC)
      Смещение
     дес. шестн.
              .-----------------------------------------------.
        0   0 |        SOH  -  Start Of Header -  01H         |
              +-----------------------------------------------+
        1   1 |                 BlockNumber                   |
              +-----------------------------------------------+
        2   2 |               BlockComplement                 |
              +-----------------------------------------------+
        3   3 |                  128 байт                     |
              ~             неинтерпретированных              ~
              |                   данных                      |
              +-----------------------------------------------+
      131  83 |               старший байт CRC                |
              +-----------------------------------------------+
      132  84 |               младший байт CRC                |
              `-----------------------------------------------'



               Блок данных XMODEM (режим контрольной суммы)
      Смещение
     дес. шестн.
              .-----------------------------------------------.
        0   0 |        SOH  -  Start Of Header -  01H         |
              +-----------------------------------------------+
        1   1 |                 BlockNumber                   |
              +-----------------------------------------------+
        2   2 |               BlockComplement                 |
              +-----------------------------------------------+
        3   3 |                  128 байт                     |
              ~             неинтерпретированных              ~
              |                   данных                      |
              +-----------------------------------------------+
      131  83 |            байт контрольной суммы             |
              `-----------------------------------------------'


                      Блок дескриптора файла TeLink
      Смещение
     дес. шестн.
              .-----------------------------------------------.
        0   0 |         SYN  - File Info Header -  16H        |
              +-----------------------------------------------+
        1   1 |                     00H                       |
              +-----------------------------------------------+  Смещение
        2   2 |                     FFH                       | дес. шестн.
              +-----------------------------------------------+
        3   3 |          File Length, младший байт            |  0    0
              +-----------------------------------------------+
        4   4 |    File Length, следующий за младшим байт     |  1    1
              +-----------------------------------------------+
        5   5 |    File Length, следующий за старшим байт     |  2    2
              +-----------------------------------------------+
        6   6 |          File Length, старший байт            |  3    3
              +-----------------------------------------------+
        7   7 |            Creation Time of File              |  4    4
              |                "Формат DOS"                   |
              +-----------------------------------------------+
        9   9 |            Creation Date of File              |  6    6
              |                "Формат DOS"                   |
              +-----------------------------------------------+
       11   B |                 File  Name                    |  8    8
              ~                 16 символов                   ~
              | выравнено по левому краю, заполнено пробелами |
              +-----------------------------------------------+
       27  1B |                    00H                        | 24   18
              +-----------------------------------------------+
       28  1C |             Sending Program Name              | 25   19
              ~                 16 символов                   ~
              | выравнено по левому краю, заполн. Нул. байтом |
              +-----------------------------------------------+
|      44  2C |            01H (для CRC) или 00H              | 41   29
              +-----------------------------------------------+
|      45  2D |                    fill                       | 42   2A
              ~                   86 байт                      ~
              |                  все нули                     |
              +-----------------------------------------------+
|     132  84 |            байт контрольной суммы             |
              `-----------------------------------------------'



      XMODEMData   = XMODEMBlock      (* блок данных с заголовком и
                                         завершителем *)
                     | TeLinkBlock    (* Блок дескриптора файла TeLink *)
                     | ACK            (* подтверждение "прием данных ok" *)
                     | NAK            (* негатив. ACK и опрос 1-го блока *)
                     | EOT            (* конец передачи, после последнего
                                         блока *)
                     | "C"            (* 43H *)

      XMODEMBlock  = SOH              (* Начало Заголовка, блок XMODEM *)
                     blockNumber[1]   (* последовательность,
                     (номерБлока)        i'=mod( i+1, 256 ) *)
                     blockCompl[1]    (* дополнение до единицы
                     (дополнениеБлока)   BlockNumber *)
                     data[128]        (* неинтерпретированный блок данных
                     (данные)            пользователя *)
                     (CRC | Checksum) (* код обнаружения/исправления
                     (CRC | Контроль-    ошибки *)
                            ная сумма)

      TeLinkBlock  = SYN              (* Заголовок информации файла *)
                     00H              (* номер блока, должен быть первым
                                         блоком *)
                     FFH              (* дополнение до единицы номера
                                         блока *)
                     fileLength[4]    (* размер данных в байтах *)
                     (длинаФайла)
                     CreationTime[2]  (* время последней модификации файла
                     (ВремяСоздания)     или ноль *)
                     CreationDate[2]  (* дата последней модификации файла
                     (ДатаСоздания)      или ноль *)
                     fileName(16)     (* имя файла, а не тома или
                     (имяФайла)          каталога *)
                     00H              (* номер версии заголовка *)
                     sendingProg(16)  (* имя программы со стороны
                     (передающаяПрогр)   отправителя *)
                     crcMode[1]       (* 01H для CRC 00H для Контрольной
                     (РежимCRC)          суммы *)
                     fill[87]         (* обнуляется *)
                     (заполнение)
                     Checksum         (* код обнаружения/исправления
                     (КонтрольнСумма)    ошибки *)

      ACK          = 06H              (* подтверждение "прием данных ok" *)
      NAK          = 15H              (* негатив. ACK и опрос 1-го блока *)
      SOH          = 01H              (* начало заголовка, начинает блок *)
      SYN          = 16H              (* начало блока информации файла
                                         TeLink *)
      EOT          = 04H              (* конец передачи, после последнего
                                         блока *)

      CRC          = crc[2]           (* Контроль Циклическим Избыточным
                                         Кодом CCITT *)

      Checksum     = checksum[1]      (* младшие 8 битов суммы байтов данных
                                         с использованием беззнаковой
                                         8-битовой арифметики *)

      CreationDate = year[.7]         (* 7 бит, годы с 1980, 0-127  *)
                     (год)
                     month[.4]        (* 4 бита, месяц года, 1-12 *)
                     (месяц)
                     day[.5]          (* 5 бит, день месяца, 1-31 *)
                     (день)

      CreationTime = hour[.5]         (* 5 бит, час суток, 0-23 *)
                     (час)
                     minute[.6]       (* 6 бит, минута часа, 0-60 *)
                     (минута)
                     biSeconds[.2]    (* 6 бит, секунды/2, 0-29 *)
                     (2 секунды)

      Обратите  внимание,  что  crcMode  всегда установлен на 01H  в текущих
      реализациях,  поскольку все реализации TeLink/XMODEM  используют метод
|     CRC.  Таким образом,  он  всегда установлен  на  01H  отправителем,  и
      игнорируется получателем.


 2. Протокол канального уровня: Конечные машины XMODEM/TeLink

    Протокол  управляется  получателем,  и получатель опрашивает отправителя
    по  каждому  блоку.  Если  получатель  опрашивает  по  первому  блоку  с
    использованием "C" (43H) в качестве символа опроса,  это значит,  что он
    предпочитает в конце каждого блока получать полиномиальный отаточный код
    обнаружения ошибок  CRC-CCITT,  а не однобайтную беззнаковую контрольную
    сумму.  Отправитель отвечает  на опрос  "C",  если  он  может  выполнить 
    запрос.  Если же он предпочитает передавать контрольную сумму, а не CRC, 
    он ждет от получателя  опроса с использованием  NAK  (15H).  Если  метод 
    контрольной  суммы  предпочтительнее  для  получателя,  он  опрашивает с 
    использованием NAK вместо "C".

    Отправитель  возвращает  EOT  вместо  блока  данных,  когда  данных  для
    передачи больше нет.

    Ни отправитель,  ни получатель не должны посылать блок или ответ ACK/NAK
    в то время,  как принимаются данные.  Они должны подождать,  пока  линия
    стабилизируется,  и по возможности еще немного.

    Рекомендуется очищать входной буфер одной стороны  после пересылки блока
    или ответа ACK/NAK, если ожидается ответ от другой стороны. Это позволит
    устранить весь мусор линии, полученный во время передачи.


    Отправитель XMODEM/TeLink

   .-----+----------+-------------------------+-------------------------+-----.
   |State| State    | Predicate(s)            | Action(s)               | Next|
   |  #  | Name     |                         |                         | St  |
   |-----+----------+-------------------------+-------------------------+-----|
   | XS0 | WaitTeLnk| 1 более 40-60 секунд    | сообщение "прекращение  |выход|
   |     |  (Ждать  |                         |   пересылки по времени" |     |
   |     |  TeLink) | 2 более 2 попыток       | примечание "сбой блока  | XS1 |
   |     |          |                         |   TeLink"               |     |
   |     |          | 3 NAK или "C" получен   | послать TLink, увеличить| XS0 |
   |     |          |                         |   значение сч. попыток  |     |
   |     |          | 4 ACK получен           | TeLink ok, послать      | XS2 |
   |     |          |                         |   CRC/контрольная сумма |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | XS1 | WaitStart| 1 более 40-60 секунд    | сообщение "прекращение  |выход|
   |     |  (Ждать  |                         |   пересылки по времени" |     |
   |     |  Начала) | 2 более 20 попыток      | сообщ. "сбой пересылки" |выход|
   |     |          | 3 NAK получен           | установить режим        | XS2 |
   |     |          |                         |   контрольной суммы     |     |
   |     |          | 4 "C" получен,          | установить режим CRC    | XS2 |
   |     |          |   имею возможность CRC  |                         |     |
   |     |          | 5 "C" получен           |                         | XS1 |
   |     |          |   нет возможности CRC   |                         |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | XS2 | SendBlock| 1 имеются данные еще    | послать следующий блок  | XS3 |
   |     | (Послать |                         |   данных как контрольную|     |
   |     |   Блок)  |                         |   сумму или CRC         |     |
   |     |          | 2 посл. блок отправлен  | послать EOT             | XS4 |
   |-----+----------+-------------------------+-------------------------+-----|
   | XS3 | WaitACK  | 1 10 попыток или 1 мин  | сообщ. "сбой пересылки" |выход|
   |     |          | 2 ACK получен           |                         | XS2 |
   |     |          | 3 NAK (или C, если      | повторить пересылку     | XS3 |
   |     |          |   первый блок)          |   последнего блока      |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | XS4 | WaitEnd  | 1 10 попыток или 1 мин  | сообщ. "сбой пересылки" |выход|
   |     |          | 2 ACK получен           | сообщение "пересылка    |выход|
   |     |          |                         |   успешная"             |     |
   |     |          | 3 NAK получен           | повторно послать EOT    | XS4 |
   `-----+----------+-------------------------+-------------------------+-----'


    XMODEM/TeLink Получатель

   .-----+----------+-------------------------+-------------------------+-----.
   |State| State    | Predicate(s)            | Action(s)               | Next|
   |  #  | Name     |                         |                         | St  |
   |-----+----------+-------------------------+-------------------------+-----|
   | XR0 | RecStart | 1 предпочитаю режим CRC | послать "C"             | XR1 |
   |     | (Начало  | 2 предпочитаю режим     | послать NAK             | XR1 |
   |     |  Приема) |   контрольной суммы     |                         |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | XR1 | WaitFirst| 1 10 попыток или 1 мин  | сообщ. "сбой приема"    |выход|
   |     |  (Ждать  | 2 > 3 попытки или 30 сек| установить "предпочитаю | XR0 |
   |     | первого) |                         |   режим контрол. суммы  |     |
|  |     |          | 3 EOT получен           | задержка < сек, очистить|выход|
|  |     |          |                         |   вход, послать ACK,    |     |
   |     |          |                         |   сообщение "нет файлов"|     |
   |     |          | 4 получен блок TeLink   | послать ACK, установить | XR2 |
   |     |          |                         |   CRC/контрольную сумму |     |
   |     |          | 5 получен блок данных   | послать ACK, установить | XR2 |
   |     |          |                         |   CRC/контрольную сумму |     |
   |     |          | 6 плох.блок или 2-10 сек| увеличить значение      | XR0 |
   |     |          |                         |   счетчика попыток      |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | XR2 | WaitBlock| 1 10 попыток или 1 мин  | сообщ. "сбой приема"    |выход|
   |     |  (Ждать  | 2 EOT получен           | послать ACK, сообщение  |выход|
   |     |   блока) |                         |   принято ok"           |     |
|  |     |          |                         | послать ACK, сообщение  |     |
   |     |          |                         |   принято ok"           |     |
   |     |          | 3 получен блок данных   | послать ACK             | XR2 |
   |     |          | 4 плох.блок или 2-10 сек| послать NAK, увеличить  | XR2 |
   |     |          |                         |   знач. счетчика попыток|     |
   `-----+----------+-------------------------+-------------------------+-----'


    Чтобы  убедиться,  что  блок данных  был  принят  правильно,  необходимо
    выполнить ряд проверок.

    o  На физическом уровне  не должно быть обнаружено ошибок,  как например
       четность, кадрирование и т.д.

    o  Размер блока не должен быть меньше ожидаемого.

    o  Если порядковый номер блока не соответствует дополнению, ответ должен
       быть NAK, и предпринимается попытка снова прочитать блок.

    o  Если порядковый номер блока на единицу меньше  (циклический переход),
       чем номер ожидаемого блока,  ответ  должен быть  ACK  и блок читается
       повторно.

    o  Если порядковый номер  не  подходит  ни под один из вышеперечисленных
       критериев,  и в то же время  не  ожидаемый  порядковый  номер,  прием
       прерывается.

    o  Контрольная сумма или CRC должны быть правильными.



 3. Протокол канального уровня: Конечные машины MODEM7 Filename


    Отправитель имени файла MODEM7

   .-----+----------+-------------------------+-------------------------+-----.
   |State| State    | Predicate(s)            | Action(s)               | Next|
   |  #  | Name     |                         |                         |  St |
   |-----+----------+-------------------------+-------------------------+-----|
   | MS0 | WaitNak  | 1 20 попыток или 1 мин  | сбой пересылки им. файла|выход|
   |     |  (Ждать  | 2 NAK получен           | послать ACK и первый    | MS1 |
   |     |   NAK)   |                         |   символ имени файла    |     |
|  |     |(примeч.1)| 3 C получен             | возврат пропуска имени  |выход|
   |     |          |                         |   файла                 |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | MS1 | WaitChAck| 1 ACK получен, имя файла| послать SUB = 1AH       | MS2 |
   |     |  (Ждать  |   передано              |                         |     |
   |     |   ACK    | 2 ACK получен, имя файла| послать следующий символ| MS1 |
   |     | символа) |   ~передано             |   имени файла           |     |
   |     |          | 3 другой симв. или 1 сек| послать "u", увеличить  | MS0 |
   |     |          |                         |   знач. счетчика попыток|     |
   |-----+----------+-------------------------+-------------------------+-----|
   | MS2 | WaitCksm | 1 контрольная сумма     | послать ACK, сообщение  |выход|
   |     |          |   получена и ok         |   "имя файла ok"        |     |
   |     |          | 2 контрольная сумма     | послать "u", увеличить  | MS0 |
   |     |          |   получена, но плохая   |   знач. счетчика попыток|     |
   |     |          | 3 нет контрольной суммы | послать "u", увеличить  | MS0 |
   |     |          |   в течение 1 секунды   |   знач. счетчика попыток|     |
   `-----+----------+-------------------------+-------------------------+-----'


    Получатель имени файла MODEM7

   .-----+----------+-------------------------+-------------------------+-----.
   |State| State    | Predicate(s)            | Action(s)               | Next|
   |  #  | Name     |                         |                         |  St |
   |-----+----------+-------------------------+-------------------------+-----|
   | MR0 | SendNak  | 1 20 попыток или 1 мин  | сообщение "сбой имени   |выход|
   |     | (Послать |                         |   файла"                |     |
   |     |   NAK)   | 2                       | послать NAK, увеличить  | MR1 |
   |     |          |                         |   знач. счетчика попыток|     |
   |-----+----------+-------------------------+-------------------------+-----|
   | MR1 | WaitAck  | 1 принят ACK            |                         | MR2 |
   |     |  (Ждать  | 2 принят EOT            | сообщение "файлов для   |выход|
   |     |   ACK)   |                         |   передачи не осталось" |     |
   |     |          | 3 5 сек и нет ACK/EOT   |                         | MR0 |
   |-----+----------+-------------------------+-------------------------+-----|
   | MR2 | WaitChar | 1 принят EOT (может     | сообщение "файлов для   |выход|
   |     |  (Ждать  |   случиться?)           |   передачи не осталось" |     |
   |     | Символа) | 2 принят SUB            | послать байт контрольной| MR3 |
   |     |          |                         |   суммы                 |     |
   |     |          | 3 принят "u"            |                         | MR0 |
   |     |          | 4 принят символ имени   | послать ACK             | MR2 |
   |     |          | 5 нет символов в течение|                         | MR0 |
   |     |          |   1 секунды             |                         |     |
   |-----+----------+-------------------------+-------------------------+-----|
   | MR3 | WaitOkCk | 1 принят ACK в течение  | сообщение "имя файла    |выход|
   |     |  (Ждать  |   1 секунды             |   принято ok"           |     |
   |     |    Ok)   | 2 принят "u" или другой |                         | MR0 |
   |     |          |   символ                |                         |     |
   `-----+----------+-------------------------+-------------------------+-----'

    SUB - это символ ASCII ^Z, или 1AH.  Контрольная сумма - это беззнаковые
    восемь младших битов суммы символов в передаваемом имени файла,  включая
    SUB.

    Хотя время ожидания  1 секунда успешно используется  в  Fido  и  SEAdog,
    имеются  некоторые  опасения,   что   это  слишком  мало  для  некоторых
    периферийных и пакетных связей в сети.

|   Примечание 1 - MS0.3 - это общее дополнение  для  согласования  с  общим
|                  несоответствием.   Поддержка   MS0.3   необязательна  для
|                  Mailer'а, соответствующего предъявляемым требованиям. Она
|                  требует также  модификации  ряда  таблиц  состояний,  см.
|                  FSC-0011.


 H. Физический уровень: Фактическое соединение двух систем FidoNet

    Может быть,  кто-нибудь,  кто разбирается в аппаратной части лучше меня,
    подскажет мне,  что  нужно  здесь?  Можем  ли  мы  оставить  этот  пункт
    достаточно открытым,  чтобы  не исключать  возможности реализации  через
    телефонную сеть без автоматического набора номера? Спасибо.


|I. Версии с момента выхода FTS-0001

|   25 октября 1989 (вер.13)
|     o  заголовок  пакета:   необязательные  порядковый  номер,   пароль, и
|        исходная зона/зона назначения
|     o  информация  об  исходных  зоне/Point'е  и  зоне/Point'е  назначения
|        добавлена как опция для Fido-12 и Dutchie
|     o  изменения XR1 и XR2 для FSC-0011
|     o  ссылка на FSC-0011 по поводу избежания MODEM7, MS0.3
|     o  опущена нумерация кодов продуктов
|     o  модификация S4 в сравнении с FSC-0011
|     o  Nodelist и EID ссылаются на соответствующие документы
|     o  различные незначительные поправки
|   1-5 июля 1990 (вер.14)
|     o  орфографические ошибки, замеченные Рэем Гарднером (Ray Gardner)
|     o  ссылки на уже несуществующий IFNA опущены
|     o  смещение в конце Упакованного Сообщения была 10, а не 20 байт
|     o  исправления в Упакованном Сообщении и  Заголовке Пакета,  внесенные
|        Роландом Гаучи (Roland Gautschi)
|     o  Смещения в заголовке TeLink, обнаруженные Риком Муром (Rick Moore)
|   30 августа 1990 (вер.15)
|     o  исправлены смещения в заголовке пакета


 J.  Автор выражает свою признательность всем, кто помогал ему в составлении
     данного документа

|   Ben Baker, Thom Henderson, Tom Jennings, Ken Kaplan, и Gee Wong  вносили
    предложения, предоставляли информацию, вносили изменения в этот документ
    и поощряли его создание.  Tom  и  Thom  предоставили  мне  весь основной
    материал,  и  даже  позволили  просмотреть  исходный  код.  Bob  Hartman 
    отважился реализовать спецификацию  и  очень  помог мне  информацией  по 
|   работе этой реализации.  Ray Gardner  обнаружил  орфографические  ошибки 
|   <краснею>,  а Roland Gautschi  и Rick Moore  нашли ошибки  по смещению и
    размерам.

    Мои  работодатели,  Pacific  Systems  Group,  были  достаточно  любезны,
    позволив мне посвятить  мое  рабочее  время  исследованиям  и  написанию 
    данного документа.

    Fido и FidoNet - зарегистрированные торговые марки Tom'а Jennings'а.

    SEAdog - торговая марка System Enhancement Associates.


 K. Список литературы

    Документация  для  протоколов  и  форматов  данных   собрана  из  многих 
    источников.  Авторы некоторых из них неизвестны, отдельные даже не имеют
    названия.  Имена файлов означают,  что они  могут быть  получены от узла
|   Fido 1:105/6 и вероятно многих других.

|   Автор  неизвестен,   изменения  к  MODEM'у  для  реализации  опции  CRC, 
    XMDM-CRC.TXT

    Baker, Ken и Moore, Rick, Определение Nodelist'а, текущий FTS-0005

    Christensen, Ward, "Обзор протокола MODEM", 1 января 1982, XMODEM.TXT

    Hartman, Bob, "Некоторые мысли по поводу FSC001", FSC-0011

    Henderson, Thom, "Система электронной почты SEAdog, Вер.3", Апрель 1986

    International  Standards  Organization,  "Обработка Данных - Взаимосвязь
    Открытых Систем - Основная Справочная Модель" ISO/DIS 7498, Апрель 1982

    Jennings, Tom,  "Протокол электронной почты FidoNet",  8  Февраля  1985,
    FIDOMAIL.DOC

    Jennings,  Tom,   "Внутренние  структуры   Fido",   13  Сентября   1985, 
    STRUCT.TXT, aka STRUCT.APX

    Jennings,  Tom,  "Расширение  протокола передачи файлов XMODEM/MODEM для
    поддержки DOS", 20 Сентября 1983, FILEXFER.DOC

    Jordan, Larry, "Протокол передачи файлов XMODEM", XMDM-LJ.TXT

    Rudin, H  и West, C,  "Спецификация, испытание и верификация протоколов,
    III",   Записки   Третьего   Международного  Семинара  по  Спецификации, 
    Испытанию и Верификации Протоколов  IFIP  WG 6.1,  Рюшликон,  Швейцария,
    31 мая - 2 июня 1983.

    Tanenbaum, Andrew, "Компьютерные Сети", Prentice Hall, 1981

    Сообщения генерированы Fido 11w, SEAdog 3.8, и QMail 1.01
